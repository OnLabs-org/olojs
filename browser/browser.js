/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({"/stdlib/json":"/stdlib/json","/stdlib/list":"/stdlib/list","/stdlib/math":"/stdlib/math","/stdlib/path":"/stdlib/path","/stdlib/text":"/stdlib/text","vendors~/stdlib/markdown":"vendors~/stdlib/markdown","/stdlib/markdown":"/stdlib/markdown"}[chunkId]||chunkId) + ".bundle.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./browser.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./browser.js":
/*!********************!*\
  !*** ./browser.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nmodule.exports = {\n    \n    expression: __webpack_require__(/*! ./lib/expression */ \"./lib/expression.js\"),\n    document: __webpack_require__(/*! ./lib/document */ \"./lib/document.js\"),\n    \n    Environment: __webpack_require__(/*! ./lib/environment */ \"./lib/environment.js\"),\n    \n    stores: {\n        \"Empty\":  __webpack_require__(/*! ./lib/stores/empty */ \"./lib/stores/empty.js\"),\n        \"Memory\": __webpack_require__(/*! ./lib/stores/memory */ \"./lib/stores/memory.js\"),\n        \"HTTP\":   __webpack_require__(/*! ./lib/stores/http */ \"./lib/stores/http.js\"),\n        \"Router\": __webpack_require__(/*! ./lib/stores/router */ \"./lib/stores/router.js\"),\n    },\n};\n\n\n//# sourceURL=webpack:///./browser.js?");

/***/ }),

/***/ "./lib/document.js":
/*!*************************!*\
  !*** ./lib/document.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n *  olojs.document\n *  ============================================================================\n *  This module contains functions to parse, evaluate and render any string of\n *  text formatted as olo-document.\n *    \n *  ```js\n *  const source = \"Twice x is <% 2*x %>!\";\n *  const context = olojs.document.createContext({x:10});\n *  const evaluate = olojs.document.parse(source);\n *  const namespace = await evaluate(context);\n *  const rendering = await olojs.document.render(namespace);\n *  // rendering is \"Twice x is 20!\"\n *  ```\n */\n\n\n\n//  olojs.document.expression\n//  ----------------------------------------------------------------------------\n//  This object is used to parse and evaluate the expression fields of the\n//  olo-document. It points by default to the swan expression module, but it \n//  could be replaced by any expression module implementing the followin \n//  methods:\n//  - expression.parse\n//  - expression.createContext\n//  - expression.stringify\n//  - expression.apply\nexports.expression = __webpack_require__(/*! ./expression */ \"./lib/expression.js\");\n\n\n\n/**\n *  olojs.document.parse - function\n *  ----------------------------------------------------------------------------\n *  Compiles a document source into an `evaluate` function that takes as input\n *  a document context object and returns the document namespace object.\n *    \n *  ```js\n *  const evaluate = olojs.document.parse(source);\n *  const namespace = await evaluate(context);\n *  ```\n *\n *  - `source`: a string containing olo-document markup\n *  - `evaluate`: an asynchronous function that evaluates the document and \n *    returns its namespace\n *  - `namespace`: an object containing all the names defined by the inline \n *    expression of the document\n */ \nexports.parse = function (source) {\n    var parsedSource = String(source);\n    \n    // Find all the swan expressions in the source, store them in an array and\n    // replace them with a placeholder.\n    const parsedExpressions = [];\n    parsedSource = parsedSource.replace(/<%([\\s\\S]+?)%>/g, (match, expressionSource) => {  \n        let i = parsedExpressions.length;\n        let parsedExpression;\n        try {\n            parsedExpression = this.expression.parse(expressionSource);\n        } catch (error) {\n            parsedExpression = context => {throw error};\n        }\n        parsedExpression.source = expressionSource;            \n        parsedExpressions.push( parsedExpression );\n        return `<%${i}%>`;\n    }); \n    \n    // The returned `evaluate` function\n    return async (context) => {\n        const doc = {};\n        \n        // Evaluate each expression in the given context and replace the\n        // placeholder with the stringified expression value\n        var text = parsedSource;\n        for (let i=0; i<parsedExpressions.length; i++) {\n            let evaluateExpression = parsedExpressions[i];\n            try {\n                var value = await evaluateExpression(context);                                    \n            } catch (error) {\n                // Delegate error rendering to the custom `context.$renderError` function\n                var value = context.$renderError({\n                    message: error.message,\n                    source: evaluateExpression.source\n                });\n            }\n            text = text.replace(`<%${i}%>`, await this.render(value));\n        }\n        \n        // Extract the document namespace, discarding the global context\n        // variables.  \n        const namespace = Object.assign({}, context);\n        \n        // Define the `__str__` name as the rendered text in order to make the \n        // namespace stringify to the rendered text.\n        namespace.__str__ = text;\n\n        // Return the document namespace\n        return namespace;\n    };               \n}\n\n\n\n\n/**\n *  olojs.document.createContext - function\n *  ----------------------------------------------------------------------------\n *  Creates a custom document evaluation context, by adding to the basic \n *  context all the names defined in the passed namespace.\n *    \n *  ```js\n *  const context = olojs.document.createContext(...namespaces)\n *  ```\n *  - `namespaces`: list of objects; each of them, from left to right, will be \n *    mixed-in to the basic document context\n *  - `context`: an object containing all the named values and function that\n *    will be visible to the document inline expressions.\n */\nexports.createContext = function (...namespaces) {\n    return this.expression.createContext(documentGlobals, ...namespaces);\n}\n\nconst documentGlobals = {\n\n    $renderError (error) {\n        return `[!${error.message}]`;\n    },        \n};\n\n\n\n/**\n *  olojs.document.render - async function\n *  ----------------------------------------------------------------------------\n *  This function exposes to javascript the serialization algorithm used in\n *  to convert the inline expression result values to text.\n *    \n *  ```js\n *  const text = await olojs.render(value)\n *  ```\n *  \n *  - `value`: any javascript value\n *  - `text`: textual representation of the passed value, obtained according to\n *    the same rules applied to the inline expressions\n *  \n *  If it exists, this function applies the `context.__render__` decorator to \n *  the stringified value.\n */\n exports.render = async function (value) {\n    var text = this.expression.stringify(value);\n    if (value && value.__render__) {\n        text = await this.expression.apply(value.__render__, text);\n        text = await this.expression.stringify(text);            \n    }\n    return text;\n}\n\n\n//# sourceURL=webpack:///./lib/document.js?");

/***/ }),

/***/ "./lib/environment.js":
/*!****************************!*\
  !*** ./lib/environment.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nconst pathlib = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\nconst document = __webpack_require__(/*! ./document */ \"./lib/document.js\");\n\nconst EmptyStore = __webpack_require__(/*! ./stores/empty */ \"./lib/stores/empty.js\");\nconst MemoryStore = __webpack_require__(/*! ./stores/memory */ \"./lib/stores/memory.js\");\n\n\n\n/**\n *  olojs.Environment\n *  ============================================================================\n *  Creates a new olojs environment, which represents a colection of\n *  interdependent documents.\n *  \n *  \n *  ```js\n *  const environment = olojs.Environment({globals, store})\n *  ```\n *  \n *  - `globals` is on object containing a set of names that will be included in\n *    every document contexts; it defaults to {}\n *  - `store` is an olojs store object that will provide read/write access to\n *    the documents repository; it defaults to olojs.stores.Memory.\n */\n \nclass Environment {\n    \n    constructor (options) {\n        \n        this.store = getProp(options, 'store') instanceof EmptyStore ? \n                options.store : new MemoryStore();\n                \n        this.globals = isObject(getProp(options, 'globals')) ? \n                Object.create(options.globals) : {};\n\n                \n        // Create the import function to be used by document expressions to load\n        // and evaluate other documents of this environment\n        const environment = this;\n        this.globals.import = async function (subPath) {\n            const context = this;   // called by swan with the document context as first parameter of call\n            const targetPath = pathlib.resolve(context.__path__, isDir(context.__path__) ? '.' : '..', subPath);\n            if (context.$cache.imports.has(targetPath)) {\n                var targetDoc = context.$cache.imports.get(targetPath);\n            } else {\n                var targetDoc = await environment.readDocument(targetPath);\n                context.$cache.imports.set(targetPath, targetDoc);\n            }\n            const targetDocContext = targetDoc.createContext();\n            return await targetDoc.evaluate(targetDocContext);  \n        }\n    }\n    \n    /**\n     *  environment.createDocument - function\n     *  --------------------------------------------------------------------\n     *  Creates a document object containing the document source and\n     *  methods to evaluate that source to a namespace.\n     *  \n     *  ```js\n     *  const doc = environment.createDocument(id, source)\n     *  ```\n     *  \n     *  - `id` is a path uri identifying the document in this environment; it\n     *    can contain a path, an optional query and an optional frarment.\n     *  - `source` is the un-parsed content of the document\n     *  - `presets` is an object containing predefined name to be added to\n     *    the documen context\n     *  - `doc.id` contains the document id with the path segment in normalized form\n     *  - `doc.source` contain the un-parsed content of the document\n     *  - `doc.createContext` is a function that takes a list of namespaces\n     *    as input and returns a context that contains a) the environment\n     *    global namespace, b) the passed namespaces and c) the presets\n     *  - `evaluate` is an asynchronous function that takes a context as\n     *    input and returns the document namespace computed in that context\n     */\n    createDocument (id, source, presets) {\n        const environment = this;\n        const path = pathlib.join('/', sliceBefore(id, '?'));\n        const query = sliceAfter(id, '?');\n        const argns = query ? parseParameters(...query.split('&')) : {};\n        \n        const cache = {\n            evaluate: null,\n            imports: new Map()\n        };\n        \n        return {\n            \n            get id () {\n                return path + (query ? `?${query}` : \"\");\n            },\n            \n            get source () {\n                return String(source);\n            },\n            \n            createContext (...namespaces) {\n                const context = document.createContext(environment.globals, ...namespaces);\n                if (isObject(presets)) Object.assign(context, presets);\n                context.$cache = cache;\n                context.__path__ = path;\n                context.argns = argns;\n                return context;\n            },\n            \n            get evaluate () {\n                return cache.evaluate || (cache.evaluate = document.parse(this.source));\n            }        \n        }            \n    }\n    \n    /**\n     *  environment.readDocument - async function\n     *  --------------------------------------------------------------------\n     *  Returns the document mapped to a given id in this environment.\n     *  \n     *  ```js\n     *  const doc = await environment.readDocument(id)\n     *  ```\n     *  \n     *  - `id` is an URI that identifies the required document inside this\n     *    environment; it can contain a path, an optional query and an optional \n     *    frarment.\n     *  - `doc` is the document object returned by the `createDocument`\n     *    method.\n     */\n    async readDocument (id) {\n        const path = sliceBefore(id, '?');\n        const source = await this.store.get(path);\n        return this.createDocument(id, source);\n    }    \n\n\n    /**\n     *  environment.writeDocument - async function\n     *  --------------------------------------------------------------------\n     *  Changes the content of the document mapped to the given id in this\n     *  environment.\n     *\n     *  ```js\n     *  await environment.writeDocument(id, source)\n     *  ```\n     *  \n     *  - `id` is an URI that identifies the required document inside this\n     *    environment; it can contain a path, an optional query and an optional \n     *    frarment.\n     *  - `source` is the new value to be assigned to the document source\n     */\n    async writeDocument (id, source) {\n        const path = sliceBefore(id, '?');\n        return await this.store.set(path, source);\n    }\n    \n    \n    /**\n     *  environment.deleteDocument - async function\n     *  --------------------------------------------------------------------\n     *  Erases the document mapped to the given uri in this environment.\n     *\n     *  ```js\n     *  await environment.deleteDocument(id)\n     *  ```\n     *  \n     *  - `id` is an URI that identifies the required document inside this\n     *    environment; it can contain a path, an optional query and an optional \n     *    frarment.\n     */\n    async deleteDocument (id) {\n        const path = sliceBefore(id, '?');\n        return await this.store.delete(path);\n    }    \n    \n    \n    /**\n     *  environment.render - async function\n     *  --------------------------------------------------------------------\n     *  This is just a stortcut to the `document.render` function.\n     */\n    render (value) {\n        return document.render(value);\n    }    \n}\n\n\nmodule.exports = Environment;\n\n\n// -----------------------------------------------------------------------------\n//  SUPPORT FUNCTIONS\n// -----------------------------------------------------------------------------\n\nconst isObject = obj => obj && typeof obj === 'object' && !Array.isArray(obj);\nconst extend = (parent, child) => Object.assign(Object.create(parent), child);\nconst getProp = (obj, key) => isObject(obj) ? obj[key] || null : null;\nconst getItem = (array, i) => i < 0 ? array[array.length+i] : array[i];\nconst sliceBefore = (str, separator) => str.split(separator)[0];\nconst sliceAfter = (str, separator) => str.split(separator)[1] || \"\";\nconst isDir = path => path.slice(-1) === '/';\n\n// Given a list of argument ['par1=val1', 'par2=val2', 'par3=val3', ...], \n// converts it to an object ontaining the ke-value pair contained in the list\nfunction parseParameters (...keyValuePairs) {\n    const argns = {};\n    for (let keyValuePair of keyValuePairs) {\n        const separatorIndex = keyValuePair.indexOf(\"=\");\n        if (separatorIndex === -1) {\n            let name = keyValuePair.trim();\n            if (document.expression.isValidName(name)) argns[name] = null;\n        } else {\n            let name = keyValuePair.slice(0, separatorIndex).trim();\n            if (document.expression.isValidName(name)) {\n                let string = keyValuePair.slice(separatorIndex+1).trim();\n                let number = Number(string);\n                argns[name] = isNaN(number) ? string : number;\n            }\n        }\n    }\n    return argns;\n}\n\n\n//# sourceURL=webpack:///./lib/environment.js?");

/***/ }),

/***/ "./lib/expression.js":
/*!***************************!*\
  !*** ./lib/expression.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n *  olojs.expression\n *  ============================================================================\n *  This module contains function for parsing and evaluation swan expressions.\n *  \n *  Example:\n *  ```js\n *  evaluate = olojs.expression.parse( \"3 * x\" );\n *  context = olojs.expression.createContext({x:10});\n *  value = await evaluate(context);                        // 30\n *  ```\n */\n\nconst extend = (parent, child) => Object.assign(Object.create(parent), child);\n\n\n// -----------------------------------------------------------------------------\n//  TYPES\n// -----------------------------------------------------------------------------\n\nconst $type = Symbol(\"Type tag\");\n\nconst types = {};\n\ntypes.Anything = {name:\"Anything\"};\n\ntypes.Tuple = extend(types.Anything, {name:\"Tuple\"});\n\ntypes.Nothing = extend(types.Anything, {name:\"Nothing\"});\n\ntypes.Boolean = extend(types.Anything, {name:\"Boolean\"});\n\ntypes.Number = extend(types.Anything, {name:\"Number\"});\n\ntypes.Sequence = extend(types.Anything, {name:\"Sequence\"});\n\ntypes.String = extend(types.Sequence, {name:\"String\"});\n\ntypes.List = extend(types.Sequence, {name:\"List\"});\n\ntypes.Namespace = extend(types.Anything, {name:\"Namespace\"});\n\ntypes.Function = extend(types.Anything, {name:\"Function\"});\n\n// Define a binary operation on several types\nfunction defineBinaryOperation (opName, handlers) {\n    for (let [xTypeName, yTypeName, handler] of handlers) {\n        let xType = types[xTypeName];\n        let yType = types[yTypeName];\n        xType[`op_${opName}_${yTypeName}`] = handler;\n    }\n    \n    return function (x, y) {\n        const xType = detectType(x); \n        const yType = detectType(y);\n        const handler = xType[`op_${opName}_${yType.name}`] || xType[`op_${opName}_Anything`];\n        if (handler) return handler.call(this, x, y);\n        return raise(`${opName} operation not defined between ${xType.name} and ${yType.name}`);\n    }\n}\n\n// Define a function on several types\nfunction defineFunction (fname, handlers) {\n    const hkey = `fn_${fname}`;\n    for (let [typeName, handler] of handlers) {\n        let type = types[typeName];\n        type[hkey] = handler;\n    }\n    \n    return function (x) {\n        const xType = detectType(x); \n        const handler = xType[hkey];\n        if (handler) return handler.call(this, x);\n        return raise(`${fname} not defined for ${xType.name} type`);\n    }\n}\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  TYPE DETECTION\n// -----------------------------------------------------------------------------\n\nfunction detectType (value) {\n    \n    // if Nothing\n    if (isNothing(value)) return types.Nothing;\n\n    // if primitive\n    switch (typeof value) {\n        case \"boolean\"  : return types.Boolean;\n        case \"number\"   : return types.Number;\n        case \"string\"   : return types.String;\n    }    \n    \n    // It must be an object!\n    \n    // If it has a type tag\n    if (value[$type]) return value[$type];\n    \n    // if Function\n    if (typeof value === \"function\") return value[$type] = types.Function;\n    \n    // if List\n    if (Array.isArray(value)) return value[$type] = types.List;\n    \n    // if a primitive object\n    switch (Object.prototype.toString.call(value)) {\n        case '[object Boolean]': return value[$type] = types.Boolean;\n        case '[object Number]' : return value[$type] = types.Number;\n        case '[object String]' : return value[$type] = types.String;\n    }\n    \n    // It is a Namespace without name tag!\n    return value[$type] = types.Namespace;\n}\n\nfunction isNothing (value) {\n    return value === null || value === undefined || Number.isNaN(value);\n}\n\nfunction isTuple (value) {\n    try {\n        return value[$type] === types.Tuple;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isNamespace (value) {\n    return detectType(value) === types.Namespace;\n}\n\nfunction isValidName (name) {    \n    return /^[a-z_A-Z]+[a-z_A-Z0-9]*$/.test(name);\n}\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  TYPE CONVERSION\n// -----------------------------------------------------------------------------\n\nconst convertToBoolean = defineFunction(\"convertToBoolean\", [\n    [\"Nothing\"  , x => false],\n    [\"Boolean\"  , x => x],\n    [\"Number\"   , x => x != 0],\n    [\"Function\" , x => true],\n    [\"String\"   , x => x.length !== 0],\n    [\"List\"     , x => x.length !== 0],\n    [\"Namespace\", x => countNames(x) !== 0],\n    [\"Tuple\"    , x => any(convertToBoolean, x)]\n]);\n\nconst convertToString = defineFunction(\"convertToString\", [\n    [\"Nothing\"  , x => \"\"],\n    [\"Boolean\"  , x => x ? \"TRUE\" : \"FALSE\"],\n    [\"Number\"   , x => String(x)],\n    [\"Function\" , x => \"[[Function]]\"],\n    [\"String\"   , x => x],\n    [\"List\"     , x => `[[List of ${x.length} items]]`],\n    [\"Namespace\", x => detectType(x.__str__) === types.String ? x.__str__ : `[[Namespace of ${countNames(x)} items]]`],\n    [\"Tuple\"    , x => Array.from(x).map(convertToString).join(\"\")],\n]);\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  TUPLE OPERATIONS\n// -----------------------------------------------------------------------------\n\nfunction *iter (tuple) {\n    if (isNothing(tuple)) return;\n    if (!isTuple(tuple)) yield tuple;\n    else for (let item of tuple) yield(item);\n}\n\nfunction *iterSequence (seq) {\n    for (let i=0; i<seq.length; i++) yield {index:i, value:seq[i]};\n}\n\nfunction *iterNamespace (ns) {\n    const names = Object.getOwnPropertyNames(ns).sort();\n    for (let name of names) yield {name:name, value:ns[name]};\n}\n\nfunction createTuple (...items) {\n    const tuple = {\n        \n        [$type]: types.Tuple,\n        \n        *[Symbol.iterator] () {\n            for (let item of items) {\n                for (let subItem of iter(item)) yield subItem;\n            }            \n        }        \n    };\n\n    let iterator = tuple[Symbol.iterator]();\n    \n    let first = iterator.next();\n    if (first.done) return null;\n    return iterator.next().done ? first.value : tuple;\n}\n\nconst NOTHING = createTuple();\n\nconst createRange = defineFunction(\"Range\", [\n    [\"Number\", (n) => {\n        n = Math.trunc(n);\n        var range = NOTHING;\n        if (n > 0) for (let i=0; i<n; i++) {\n            range = createTuple(range, i);\n        } else if (n < 0) for (let i=0; i>n; i--) {\n            range = createTuple(range, i);\n        }\n        return range;\n    }]\n]);\n\nconst enumerate = defineFunction(\"Enumeration\", [\n    [\"String\",    x => createTuple(...iterSequence(x))],\n    [\"List\",      x => createTuple(...iterSequence(x))],\n    [\"Namespace\", x => createTuple(...iterNamespace(x))]\n]);\n\nasync function map (fn, tuple) {\n    if (isNothing(tuple)) return NOTHING;\n    if (!isTuple(tuple)) return await fn(tuple);\n    \n    var image = NOTHING;\n    for (let item of tuple) {\n        image = createTuple(image, await fn(item));\n    }\n    return image;\n}\n\nfunction *pair (x, y) {\n    const iX = iter(x)[Symbol.iterator]();\n    const iY = iter(y)[Symbol.iterator]();\n    while (true) {\n        let x = iX.next();\n        let y = iY.next();\n        if (x.done && y.done) break;\n        yield {first:x.value, second:y.value};\n    }    \n}\n\nfunction mapPairs (fn, x, y) {\n    const ptuple = createTuple(...pair(x, y));\n    return map(pair => fn(pair.first, pair.second), ptuple);\n}\n\nasync function any (fn, tuple) {\n    for (let item of iter(tuple)) {\n        if (await fn(item)) return true;\n    }\n    return false;\n}\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  ARITHMETIC OPERATIONS\n// -----------------------------------------------------------------------------\n\nconst add = defineBinaryOperation(\"Sum\", [\n    [\"Anything\" , \"Nothing\"  , (self, other) => self],    \n    [\"Anything\" , \"Tuple\"    , (self, other) => mapPairs(add, self, other)],\n    [\"Nothing\"  , \"Anything\" , (self, other) => other],\n    [\"Boolean\"  , \"Boolean\"  , (self, other) => self || other],\n    [\"Number\"   , \"Number\"   , (self, other) => self + other],\n    [\"String\"   , \"String\"   , (self, other) => self + other],\n    [\"List\"     , \"List\"     , (self, other) => self.concat(other)],\n    [\"Namespace\", \"Namespace\", (self, other) => Object.assign({}, self, other)],\n    [\"Tuple\"    , \"Anything\" , (self, other) => mapPairs(add, self, other)],\n]);\n\nconst sub = defineBinaryOperation(\"Subtraction\", [\n    [\"Anything\", \"Tuple\"   , (self, other) => mapPairs(sub, self, other)],\n    [\"Nothing\" , \"Anything\", (self, other) => NOTHING],\n    [\"Anything\", \"Nothing\" , (self, other) => self],\n    [\"Number\"  , \"Number\"  , (self, other) => self - other],\n    [\"Tuple\"   , \"Anything\", (self, other) => mapPairs(sub, self, other)],\n]);\n\nconst mul = defineBinaryOperation(\"Product\", [\n    [\"Nothing\" , \"Anything\", (self, other) => NOTHING],\n    [\"Anything\", \"Nothing\" , (self, other) => NOTHING],\n    [\"Anything\", \"Tuple\"   , (self, other) => mapPairs(mul, self, other)],\n    [\"Boolean\" , \"Boolean\" , (self, other) => self && other],\n    [\"Number\"  , \"Number\"  , (self, other) => self * other],\n    [\"Number\"  , \"String\"  , (self, other) => self < 0 ? \"\" : other.repeat(self)],\n    [\"Number\"  , \"List\"    , (self, other) => multiplyList(other, self)],\n    [\"String\"  , \"Number\"  , (self, other) => other < 0 ? \"\" : self.repeat(other)],\n    [\"List\"    , \"Number\"  , (self, other) => multiplyList(self, other)],\n    [\"Tuple\"   , \"Anything\", (self, other) => mapPairs(mul, self, other)],\n]);\n\nfunction multiplyList (list, n) {\n    var product = [];\n    for (let i=1; i<=n; i++) product = product.concat(list);\n    return product;    \n}\n\nconst div = defineBinaryOperation(\"Division\", [\n    [\"Anything\", \"Tuple\"   , (self, other) => mapPairs(div, self, other)],\n    [\"Nothing\" , \"Anything\", (self, other) => NOTHING],\n    [\"Number\"  , \"Number\"  , (self, other) => self / other],\n    [\"Tuple\"   , \"Anything\", (self, other) => mapPairs(div, self, other)],\n]);\n\nconst mod = defineBinaryOperation(\"Modulo\", [\n    [\"Anything\", \"Tuple\"   , (self, other) => mapPairs(mod, self, other)],\n    [\"Nothing\" , \"Anything\", (self, other) => other],\n    [\"Number\"  , \"Number\"  , (self, other) => self % other],\n    [\"Tuple\"   , \"Anything\", (self, other) => mapPairs(mod, self, other)],\n]);\n\nconst pow = defineBinaryOperation(\"Exponentiation\", [\n    [\"Anything\", \"Tuple\"   , (self, other) => mapPairs(pow, self, other)],\n    [\"Nothing\" , \"Anything\", (self, other) => NOTHING],\n    [\"Number\"  , \"Number\"  , (self, other) => self ** other],\n    [\"Tuple\"   , \"Anything\", (self, other) => mapPairs(pow, self, other)],\n]);\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  COMPARISON OPERATIONS\n// -----------------------------------------------------------------------------\n\nconst compare = defineBinaryOperation(\"Comparison\", [\n    [\"Nothing\"  , \"Nothing\"  , (self, other) => 0],\n    [\"Nothing\"  , \"Anything\" , (self, other) => -1],\n    [\"Anything\" , \"Nothing\"  , (self, other) => +1],\n    \n    [\"Boolean\"  , \"Boolean\"  , (self, other) => self === other ? 0 : (self ? +1 : -1)],\n    [\"Number\"   , \"Number\"   , (self, other) => self === other ? 0 : (self<other ? -1 : +1)],\n    [\"String\"   , \"String\"   , (self, other) => self.localeCompare(other)],\n    [\"List\"     , \"List\"     , (self, other) => lexCompare(createTuple(...self), createTuple(...other))],\n    \n    [\"Anything\" , \"Tuple\"    , (self, other) => lexCompare(self, other)],\n    [\"Tuple\"    , \"Anything\" , (self, other) => lexCompare(self, other)],\n    [\"Tuple\"    , \"Tuple\"    , (self, other) => lexCompare(self, other)]    \n]);\n\nfunction lexCompare (tuple1, tuple2) {\n    for (let p of pair(tuple1, tuple2)) {\n        let cmp = compare(p.first, p.second);\n        if (cmp !== 0) return cmp;\n    }\n    return 0;\n}\n\nconst isEqual = defineBinaryOperation(\"Equality\", [\n    [\"Anything\" , \"Anything\" , (self, other) => false],    \n    [\"Nothing\"  , \"Nothing\"  , (self, other) => true],\n    [\"Boolean\"  , \"Boolean\"  , (self, other) => self === other],\n    [\"Number\"   , \"Number\"   , (self, other) => self === other],\n    [\"String\"   , \"String\"   , (self, other) => self === other],\n    [\"Function\" , \"Function\" , (self, other) => self === other],\n    [\"List\"     , \"List\"     , (self, other) => isLexEqual(createTuple(...self), createTuple(...other))],\n    [\"Namespace\", \"Namespace\", (self, other) => {\n        let xNames = Object.getOwnPropertyNames(self).filter(isValidName);\n        let yNames = Object.getOwnPropertyNames(other).filter(isValidName);\n        if (xNames.length !== yNames.length) return false;\n        for (let xName of xNames) {\n            let xValue = self[xName];\n            let yValue = other.hasOwnProperty(xName) ? other[xName] : NOTHING;\n            if (!isEqual(xValue, yValue)) return false;\n        }\n        return true;        \n    }],\n    [\"Anything\" , \"Tuple\"    , (self, other) => isLexEqual(self, other)],\n    [\"Tuple\"    , \"Anything\" , (self, other) => isLexEqual(self, other)],\n    [\"Tuple\"    , \"Tuple\"    , (self, other) => isLexEqual(self, other)]\n]);\n\nfunction isLexEqual (tuple1, tuple2) {\n    for (let p of pair(tuple1, tuple2)) {\n        if (!isEqual(p.first, p.second)) return false;\n    }\n    return true;    \n}\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  MISCELLANEOUS OPERATION\n// -----------------------------------------------------------------------------\n\nconst apply = defineBinaryOperation(\"Apply\", [\n    [\"Nothing\"  , \"Anything\", (self, other) => NOTHING],\n    [\"String\"   , \"Number\"  , (self, index) => getListItem(self, index) || \"\"],\n    [\"String\"   , \"Anything\", (self, other) => \"\"],\n    [\"List\"     , \"Number\"  , (self, index) => getListItem(self, index) || NOTHING],\n    [\"List\"     , \"Anything\", (self, other) => NOTHING],\n    [\"Namespace\", \"String\"  , function (self, name) {\n        if (typeof self.__apply__ === 'function') {\n            return self.__apply__.call(this, name);\n        }\n        return isValidName(name) && self.hasOwnProperty(name) ? self[name] : NOTHING;\n    }],\n    [\"Namespace\", \"Anything\", function (self, other) {\n        if (typeof self.__apply__ === 'function') {\n            return self.__apply__.call(this, other);\n        }\n        return NOTHING;\n    }],\n    [\"Function\" , \"Anything\", function (self, other) {\n        return self.call(this, ...iter(other));        \n    }],\n    [\"Tuple\"    , \"Anything\", function (self, other) {\n        return map(item => apply.call(this, item, other), self);\n    }],\n]);\n\nfunction getListItem (list, index) {\n    index = index < 0 ? list.length + index : index;\n    return (0 <= index && index < list.length) ? list[Math.trunc(index)] : null;\n}\n\nconst size = defineFunction(\"Size\", [\n    [\"String\", x => x.length],\n    [\"List\", x => x.length],\n    [\"Namespace\", x => countNames(x)]\n]);\n\nfunction countNames (namespace) {\n    return Object.getOwnPropertyNames(namespace).length;\n};\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  EXCEPTIONS\n// -----------------------------------------------------------------------------\n\nclass Exception extends Error {};\n\nfunction raise (message) {\n    throw new Exception(message);\n}\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  PARSER\n// -----------------------------------------------------------------------------\n\nconst Parser = __webpack_require__(/*! ./expression/parser */ \"./lib/expression/parser.js\");\n\nconst parse = Parser({\n     \n     binaryOperations: {\n         \",\"  : {precedence:10, handler:\"$pair\"  },\n         \":\"  : {precedence:11, handler:\"$label\" },\n         \"=\"  : {precedence:11, handler:\"$set\"   },\n         \"->\" : {precedence:12, handler:\"$def\",  right:true},\n\n         \";\"  : {precedence:21, handler:\"$else\"},\n         \"?\"  : {precedence:22, handler:\"$if\"  },\n         \"|\"  : {precedence:23, handler:\"$or\"  },\n         \"&\"  : {precedence:23, handler:\"$and\" },\n         \"==\" : {precedence:24, handler:\"$eq\"  },\n         \"!=\" : {precedence:24, handler:\"$ne\"  },\n         \"<\"  : {precedence:24, handler:\"$lt\"  },\n         \"<=\" : {precedence:24, handler:\"$le\"  },\n         \">\"  : {precedence:24, handler:\"$gt\"  },\n         \">=\" : {precedence:24, handler:\"$ge\"  },\n         \"+\"  : {precedence:25, handler:\"$add\" },\n         \"-\"  : {precedence:25, handler:\"$sub\" },\n         \"*\"  : {precedence:26, handler:\"$mul\" },    \n         \"/\"  : {precedence:26, handler:\"$div\" },\n         \"%\"  : {precedence:26, handler:\"$mod\" },\n         \"^\"  : {precedence:27, handler:\"$pow\" },\n         \n         \".\"  : {precedence:30, handler:\"$dot\" },\n         \"\"   : {precedence:30, handler:\"$apply\" },\n     },\n     \n     voidHandler        : \"$nothing\",\n     nameHandler        : \"$name\",\n     stringHandler0     : \"$str0\",\n     stringHandler1     : \"$str1\",\n     stringHandler2     : \"$str2\",\n     numberHandler      : \"$numb\",\n     squareGroupHandler : \"$list\",\n     curlyGroupHandler  : \"$namespace\",\n});\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  CONTEXT\n// -----------------------------------------------------------------------------\n\nconst context = {\n    \n    $nothing () {\n        return null;\n    },\n    \n    async $str0 (text) {\n        const parsedExpressions = [];\n        text = text.replace(/\\$\\{([\\s\\S]+?)\\}/g, (match, expressionSource) => {  \n            let i = parsedExpressions.length;\n            parsedExpressions.push( parse(expressionSource) );\n            return \"${\"+i+\"}\";\n        }); \n        \n        const templateContext = Object.create(this);\n        for (let i=0; i<parsedExpressions.length; i++) {\n            let evaluateExpression = parsedExpressions[i];\n            let value = await evaluateExpression(templateContext);                \n            text = text.replace(\"${\"+i+\"}\", await this.str(...iter(value)));\n        }\n\n        return text;\n    },\n    \n    $str1 (value) {\n        return value;\n    },\n    \n    $str2 (value) {\n        return value;\n    },\n    \n    $numb (value) {\n        return value;\n    },\n    \n    async $pair (X, Y) {\n        return createTuple(await X(this), await Y(this));\n    },\n        \n    async $list (X) {\n        const x = await X(this);\n        return Array.from(iter(x));\n    },\n    \n    async $name (name) {\n        if (isValidName(name)) {\n            let value = this[name];\n            if (value !== undefined && value !== Object.prototype[name]) return value;\n        }\n        return null;\n    },\n    \n    async $label (X, Y) {\n        const x = await X({\n            $nothing: this.$nothing,\n            $name: name => name,\n            $pair: this.$pair\n        });\n        const names = Array.from(iter(x));\n        const y = await Y(this);\n        const values = Array.from(iter(y));\n        if (values.length > names.length) {\n            values[names.length-1] = createTuple(...values.slice(names.length-1))\n        }\n        for (var i=0; i<names.length; i++) {\n            this[names[i]] = i < values.length ? values[i] : null;\n        }\n        return y;\n    },\n    \n    async $set (X, Y) {\n        await this.$label(X, Y);\n        return null;\n    },\n\n    async $namespace (X) {\n        const context = Object.create(this);\n        await X(context);\n        return Object.assign({}, context);\n    },\n    \n    $def (params, expression) {\n        return async (...args) => {\n            const functionContext = Object.create(this);\n            await functionContext.$set(params, () => createTuple(...args));\n            return await expression(functionContext);\n        }\n    },\n    \n    async $apply (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return await apply.call(this, x, y);\n    },\n    \n    async $dot (X, Y) {\n        const x = await X(this);\n        const subcontext = async namespace => {\n            if (!isNamespace(namespace)) {\n                raise(\"Namespace expected on the left side of the '.' operator\");\n            }\n            const childNamespace = this.$extend(namespace);\n            return await Y(childNamespace);\n        };\n        return await map(subcontext, x);\n    },\n    \n    async $or (X, Y) {\n        const x = await X(this);\n        if (await this.bool(x)) return x;\n        return await Y(this);\n    },\n    \n    async $and (X, Y) {\n        const x = await X(this);\n        if (await this.not(x)) return x;\n        return await Y(this);\n    },\n    \n    async $if (X, Y) {\n        const x = await X(this);\n        return (await this.bool(x)) ? await Y(this) : null;\n    },\n\n    async $else (X, Y) {\n        const x = await X(this);\n        return isNothing(x) ? await Y(this) : x;\n    },\n    \n    async $add (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return await add(x, y);\n    },\n\n    async $sub (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return await sub(x, y);\n    },\n\n    async $mul (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return await mul(x, y);\n    },\n\n    async $div (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return await div(x, y);\n    },\n\n    async $mod (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return await mod(x, y);\n    },\n\n    async $pow (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return await pow(x, y);\n    },\n\n    async $eq (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return isEqual(x, y);\n    },\n     \n    async $ne (X, Y) {\n        return !(await this.$eq(X, Y));\n    },\n\n    async $lt (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return compare(x, y) === -1;\n    },\n\n    async $ge (X, Y) {\n        return !(await this.$lt(X, Y));\n    },\n\n    async $gt (X, Y) {\n        const x = await X(this);\n        const y = await Y(this);\n        return compare(x, y) === +1;\n    },\n\n    async $le (X, Y) {\n        return !(await this.$gt(X, Y));\n    },   \n    \n    async bool (...items) {\n        return convertToBoolean(createTuple(...items));\n    },\n    \n    async not (...items) {\n        return !(await this.bool(...items));\n    },\n    \n    str (...items) {\n        const x = createTuple(...items);        \n        return convertToString(x);\n    },\n    \n    map (fn) {\n        return (...items) => map(fn, createTuple(...items));\n    },\n    \n    size (...items) {\n        const x = createTuple(...items);\n        return size(x);\n    },\n    \n    range (...items) {\n        const x = createTuple(...items);\n        return createRange(x);\n    },    \n    \n    enum (...items) {\n        const x = createTuple(...items);\n        return enumerate(x);\n    },\n    \n    type (...items) {\n        const x = createTuple(...items);\n        return detectType(x).name;\n    },\n    \n    TRUE: true,\n    FALSE: false,\n    \n    $assign (namespace) {\n        for (let name in namespace) {\n            this[name] = namespace[name];\n        }\n        return this;\n    },\n    \n    $extend (namespace) {\n        return Object.create(this).$assign(namespace);\n    }\n};\n\n\n\n\n\n// -----------------------------------------------------------------------------\n//  EXPORTS\n// -----------------------------------------------------------------------------\n\n\n/**\n *  olojs.expression.parse - function\n *  ----------------------------------------------------------------------------\n *  Parses a swan expression and returns a function that maps a context to an\n *  expression value.\n *\n *  ```js\n *  evaluate = olojs.expression.parse(expression);\n *  value = await evaluate(context);\n *  ```\n *  \n *  - `espression` is a string containing any valid swan expression\n *  - `context` is a valid swan expression context\n *  - `value` is the value that expression result has in the given context\n */\nexports.parse = (expression) => {\n    const evaluate = parse(expression);\n    return async (expressionContext) => {\n        if (!context.isPrototypeOf(expressionContext)) {\n            throw new Error(\"Invalid context.\")\n        };\n        const value = await evaluate(expressionContext);\n        return isNothing(value) ? null : value;\n    }\n}\n\n\n/**\n *  olojs.expression.createContext - function\n *  ----------------------------------------------------------------------------\n *  Creates a valid expression context.\n *  \n *  ```js\n *  context = olojs.expression.createContext(...namespaces)\n *  ```\n *  \n *  - `namespaces` is a list of objects `ns1, ns2, ns3, ...` that will be merged\n *    to the core swan context \n *  - `context` is an object containing all the core context properties, plus \n *    all the properties of the passed namespace, added in order.\n */\nconst expression_globals = {\n    \"require\": __webpack_require__(/*! ./expression/stdlib-loader */ \"./lib/expression/stdlib-loader.js\")\n};\nexports.createContext = (...namespaces) => {\n    var ctx = context.$extend(expression_globals);\n    for (namespace of namespaces) {\n        ctx = ctx.$extend(namespace);\n    }\n    return ctx;\n}\n\n\n// Swan internals exposed to javascript\nexports.stringify = x => context.str(...iter(x));\nexports.apply = (f, ...args) => apply(f, createTuple(...args));\nexports.Exception = Exception;\nexports.isValidName = isValidName;\nexports.createTuple = createTuple;\n\n\n//# sourceURL=webpack:///./lib/expression.js?");

/***/ }),

/***/ "./lib/expression/lexer.js":
/*!*********************************!*\
  !*** ./lib/expression/lexer.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nclass SyntaxError extends Error {\n    \n    constructor (source, pos, message) {\n        super(`${message} at pos ${pos}`);\n    }\n}\n\n\n\n\n\n\nconst matchSpace = char => char && char.match(/^\\s$/);\nconst matchQuote = char => char && char.match(/^[\"'`]$/);\nconst matchIdentifierStart = char => char && char.match(/^[a-z_A-Z]$/);\nconst matchIdentifierPart = char => char && char.match(/^[a-z_A-Z0-9]$/);\nconst matchDecimalDigit = char => char && char.match(/^[0-9]$/);\nconst matchSign = char => char === \"+\" || char === \"-\";\n\nconst SYMBOLS = new Set( ['{', '[', '(', ')', ']', '}', \"=\", \":\", '->', \".\", \",\"] );\nconst matchSymbol = sym => SYMBOLS.has(sym);\n\nconst matchCommentStart = sym => sym === \"#\";\n\nconst binaryOperators = new Set();\n\n\nfunction createLexer (options) {\n    const matchSpace = char => char && char.match(/^\\s$/);\n    const matchQuote = char => char && char.match(/^[\"'`]$/);\n    const matchIdentifierStart = char => char && char.match(/^[a-z_A-Z]$/);\n    const matchIdentifierPart = char => char && char.match(/^[a-z_A-Z0-9]$/);\n    const matchDecimalDigit = char => char && char.match(/^[0-9]$/);\n    const matchSign = char => char === \"+\" || char === \"-\";\n\n    const binaryOperators = new Set(options.binaryOperators);\n    \n    const SYMBOLS = new Set( ['{', '[', '(', ')', ']', '}'].concat(options.binaryOperators.filter(operator => !matchIdentifierStart(operator))) );\n    const matchSymbol = sym => SYMBOLS.has(sym);\n    \n    class Token {\n        \n        constructor (type, value) {\n            this.type = type;\n            this.value = value;\n        }    \n        \n        matchSymbol (sym) {\n            return this.type === Token.SYMBOL && this.value === sym;\n        }\n        \n        matchSign () {\n            return this.matchSymbol(\"+\") || this.matchSymbol(\"-\");\n        }\n        \n        matchIdentifier () {\n            return this.type === Token.IDENTIFIER && !binaryOperators.has(this.value);\n        }\n        \n        matchBinaryOperator () {\n            return (this.type === Token.SYMBOL || this.type === Token.IDENTIFIER) && \n                    binaryOperators.has(this.value);\n        }\n        \n        matchOpenBracket () {\n            return this.matchSymbol('(') || this.matchSymbol('[');\n        }\n        \n        matchNumberLiteral () {\n            return this.type === Token.NUMBER;\n        }\n        \n        matchStringLiteral () {\n            return this.type === Token.STRING;\n        }\n\n        matchLiteral () {\n            return this.type === Token.NUMBER || this.type === Token.STRING;\n        }\n    }\n\n    // Token types\n    Token.SYMBOL = 0;\n    Token.NUMBER = 1;\n    Token.STRING0 = 2;\n    Token.STRING1 = 3;\n    Token.STRING2 = 4;\n    Token.IDENTIFIER = 5;\n    \n    \n    const tokenize = (source) => {\n        const tokens = [];\n        \n        var i = 0, len = source.length;\n        while (true) {\n            while (matchSpace(source[i])) i++;\n            if (i >= len) break;\n\n            // if string literal\n            if (matchQuote(source[i])) {\n                let value = \"\";            \n                let quoteSymbol = source[i]; i++;\n                while (source[i] !== quoteSymbol) {\n                    if (i >= len) throw new SyntaxError(source, i, \"Closing quote expected\");\n                    value += source[i]; i++;\n                }\n                let token = new Token(Token.STRING, value);\n                token.quoteSymbol = quoteSymbol;\n                tokens.push(token); i++;\n            }\n            \n            // if identifier\n            else if (matchIdentifierStart(source[i])) {\n                let value = source[i]; i++;\n                while (matchIdentifierPart(source[i])) {\n                    value += source[i]; i++;\n                }\n                tokens.push( new Token(Token.IDENTIFIER, value) );\n            }\n\n            // if number literal\n            else if (matchDecimalDigit(source[i])) {\n                let numStr = source[i]; i++;\n                \n                while (matchDecimalDigit(source[i])) {\n                    numStr += source[i]; i++;\n                }\n\n                if (source[i] === \".\") {\n                    numStr += source[i]; i++;\n                    while (matchDecimalDigit(source[i])) {\n                        numStr += source[i]; i++;\n                    }        \n                }\n                \n                if (source[i] === 'e' || source[i] === 'E') {\n                    numStr += 'E'; i++;\n                    if (source[i] === '+' || source[i] === '-') { // exponent sign\n                        numStr += source[i]; i++;\n                    }\n                    if (!matchDecimalDigit(source[i])) {\n                        throw new SyntaxError(source, i, `Expected exponent symbol`);                    \n                    }\n                    numStr += source[i]; i++;\n                    while (matchDecimalDigit(source[i])) {\n                        numStr += source[i]; i++;\n                    }        \n                }\n                \n                if (matchIdentifierStart(source[i])) {\n                    throw new SyntaxError(source, i, `Name names cannot start with a number`);\n                } else if (source[i] === \".\") {\n                    throw new SyntaxError(source, i, 'Unexpected period');\n                }\n\n                tokens.push( new Token(Token.NUMBER, Number(numStr)) );\n            }\n            \n            else if (matchCommentStart(source[i])) {\n                i++; while (source[i] !== \"\\n\" && i < len) i++;\n            }\n            \n            else if (matchSymbol( source[i]+source[i+1] )) {\n                tokens.push( new Token(Token.SYMBOL, source[i]+source[i+1])); i+=2;\n            } \n            \n            else if (matchSymbol( source[i] )) {\n                tokens.push( new Token(Token.SYMBOL, source[i])); i++;\n            } \n\n            else {\n                throw new Error(`Unexpected character '${source[i]}' at pos ${i}`);\n            }\n        }\n        \n        return tokens;\n    }\n    \n    return tokenize;\n}\n\n\n\n\n\n\nmodule.exports = createLexer;\n\n\n//# sourceURL=webpack:///./lib/expression/lexer.js?");

/***/ }),

/***/ "./lib/expression/parser.js":
/*!**********************************!*\
  !*** ./lib/expression/parser.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Lexer = __webpack_require__(/*! ./lexer */ \"./lib/expression/lexer.js\");\n\nconst GLOBALS = Symbol(\"Globals\");\n\n\nfunction createParser (options) {\n    const binaryOperations = options.binaryOperations || {};\n    const separator = \",\";\n    const tokenize = Lexer({binaryOperators: Object.keys(binaryOperations)});\n    \n    const parse = (source) => {\n        \n        const parseExpression = (done) => {\n            if (done()) {\n                i++; return createOperation(options.voidHandler, []);\n            }\n            \n            var expression = [ parseOperand() ];\n            \n            while (true) {\n                if (done()) {\n                    i++; break;\n                }\n                if (tokens[i].matchBinaryOperator()) {\n                    let operator = binaryOperations[ tokens[i].value ]; i++;\n                    expression.push(operator);\n                    if (done()) throw new Error(\"Operand expected\");\n                    let operand = parseOperand();\n                    expression.push(operand);\n                }\n                else {\n                    let operator = binaryOperations[\"\"];\n                    expression.push(operator);\n                    let operand = parseOperand();\n                    expression.push(operand);\n                }\n            }\n            \n            while (expression.length > 1) {\n                \n                // find higher precedence operand\n                let precedence = 0;\n                let operatorIndex = 0;\n                for (let j=1; j<expression.length; j+=2) {\n                    let operator = expression[j];\n                    if (operator.precedence > precedence) {\n                        if (operator.right) {\n                            let handler = operator.handler;\n                            while (expression[j+2] && expression[j+2].handler === handler) j += 2;\n                        }\n                        precedence = operator.precedence;\n                        operatorIndex = j;\n                    }\n                }\n                \n                // evaluate the higher precedence operation\n                let leftHandOperand = expression[operatorIndex - 1];\n                let operator = expression[operatorIndex];\n                let rightHandOperand = expression[operatorIndex + 1];\n                let operation = createOperation(operator.handler, [leftHandOperand, rightHandOperand]);\n                \n                // replace the [...,left,operator,right,...] items with the operation node\n                expression.splice(operatorIndex-1, 3, operation);\n            }\n            \n            return expression[0];        \n        }\n        \n        const parseOperand = () => {\n            var operand;\n            \n            if (tokens[i].matchSign() && tokens[i+1].matchNumberLiteral()) {\n                let factor = tokens[i].value === \"-\" ? -1 : 1;\n                operand = createOperation(options.numberHandler, [tokens[i+1].value * factor]); i+=2;\n            }\n            \n            else if (tokens[i].matchNumberLiteral()) {\n                operand = createOperation(options.numberHandler, [tokens[i].value]); i++;\n            }\n            \n            else if (tokens[i].matchStringLiteral()) {\n                if (tokens[i].quoteSymbol === \"`\") operand = createOperation(options.stringHandler0, [tokens[i].value]);\n                else if (tokens[i].quoteSymbol === `'`) operand = createOperation(options.stringHandler1, [tokens[i].value]);\n                else if (tokens[i].quoteSymbol === `\"`) operand = createOperation(options.stringHandler2, [tokens[i].value]);\n                i++;\n            }\n            \n            else if (tokens[i].matchIdentifier()) {\n                operand = createOperation(options.nameHandler, [tokens[i].value]); i++;            \n            }\n            \n            else if (tokens[i].matchSymbol('(')) {\n                i++; operand = parseExpression( () => tokens[i].matchSymbol(\")\") );\n            }\n            \n            else if (tokens[i].matchSymbol('[')) {\n                i++;\n                let expression = parseExpression( () => tokens[i].matchSymbol(\"]\") );\n                operand = createOperation(options.squareGroupHandler, [expression]);\n            }\n            \n            else if (tokens[i].matchSymbol('{')) {\n                i++;\n                let expression = parseExpression( () => tokens[i].matchSymbol(\"}\") );\n                operand = createOperation(options.curlyGroupHandler, [expression]);\n            }\n            \n            else {\n                throw new Error('Operand expected.');\n            }\n            \n            return operand;\n        }\n        \n        const tokens = tokenize(source);\n        var i = 0;\n        \n        const evaluate = parseExpression( () => i >= tokens.length );\n\n        return evaluate;\n    }\n    \n    return parse;\n}\n\n\nfunction createOperation (handlerName, operands) {\n    return scope => {\n        if (typeof scope[handlerName] !== \"function\") {\n            throw new Error(`'${handlerName}' handler not defined in this context`);\n        }\n        return scope[handlerName](...operands);\n    }\n}\n\nmodule.exports = createParser;\n\n\n//# sourceURL=webpack:///./lib/expression/parser.js?");

/***/ }),

/***/ "./lib/expression/stdlib-loader.js":
/*!*****************************************!*\
  !*** ./lib/expression/stdlib-loader.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const modules = {\n    \"math\"     : () => __webpack_require__.e(/*! import() | /stdlib/math */ \"/stdlib/math\").then(__webpack_require__.t.bind(null, /*! ./stdlib/math.js */ \"./lib/expression/stdlib/math.js\", 7)),\n    \"markdown\" : () => Promise.all(/*! import() | /stdlib/markdown */[__webpack_require__.e(\"vendors~/stdlib/markdown\"), __webpack_require__.e(\"/stdlib/markdown\")]).then(__webpack_require__.t.bind(null, /*! ./stdlib/markdown.js */ \"./lib/expression/stdlib/markdown.js\", 7)),\n    \"path\"     : () => __webpack_require__.e(/*! import() | /stdlib/path */ \"/stdlib/path\").then(__webpack_require__.t.bind(null, /*! ./stdlib/path.js */ \"./lib/expression/stdlib/path.js\", 7)),\n    \"json\"     : () => __webpack_require__.e(/*! import() | /stdlib/json */ \"/stdlib/json\").then(__webpack_require__.t.bind(null, /*! ./stdlib/json.js */ \"./lib/expression/stdlib/json.js\", 7)),\n    \"text\"     : () => __webpack_require__.e(/*! import() | /stdlib/text */ \"/stdlib/text\").then(__webpack_require__.t.bind(null, /*! ./stdlib/text.js */ \"./lib/expression/stdlib/text.js\", 7)),\n    \"list\"     : () => __webpack_require__.e(/*! import() | /stdlib/list */ \"/stdlib/list\").then(__webpack_require__.t.bind(null, /*! ./stdlib/list.js */ \"./lib/expression/stdlib/list.js\", 7)),\n    \"http\"     : () => __webpack_require__.e(/*! import() | /stdlib/list */ \"/stdlib/list\").then(__webpack_require__.t.bind(null, /*! ./stdlib/http.js */ \"./lib/expression/stdlib/http.js\", 7)),\n}\n\nmodule.exports = async function (modulePath) {\n    const module = await modules[modulePath]();\n    return module.default;\n}\n\n\n//# sourceURL=webpack:///./lib/expression/stdlib-loader.js?");

/***/ }),

/***/ "./lib/stores/empty.js":
/*!*****************************!*\
  !*** ./lib/stores/empty.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const errors = __webpack_require__(/*! ./store-errors */ \"./lib/stores/store-errors.js\");\nconst pathlib = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n\nclass EmptyStore {\n    \n    async get (path) {\n        return \"\";\n    }\n    \n    async set (path, source) {\n        throw new errors.OperationNotAllowed('SET', pathlib.normalize(`/${path}`));\n    }\n    \n    async delete (path, source) {\n        throw new errors.OperationNotAllowed('DELETE', pathlib.normalize(`/${path}`));\n    }\n    \n    static createIndexDocument (children) {\n        return `<% children = ${JSON.stringify(children)} %>`;\n    }\n}\n\n\nmodule.exports = EmptyStore;\n\n\n//# sourceURL=webpack:///./lib/stores/empty.js?");

/***/ }),

/***/ "./lib/stores/http.js":
/*!****************************!*\
  !*** ./lib/stores/http.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! isomorphic-fetch */ \"./node_modules/isomorphic-fetch/fetch-npm-browserify.js\");\nconst pathlib = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\nconst URI = __webpack_require__(/*! uri-js */ \"./node_modules/uri-js/dist/es5/uri.all.js\");\nconst errors = __webpack_require__(/*! ./store-errors */ \"./lib/stores/store-errors.js\");\nconst EmptyStore = __webpack_require__(/*! ./empty */ \"./lib/stores/empty.js\");\n\n\nconst isObject = obj => obj && typeof obj === 'object' && !Array.isArray(obj);\n\n\n/**\n *  HTTPStore\n *  ============================================================================\n *  This store handles read/write operations on remote olo-documents\n *  via HTTP(S).\n *\n *  ```js\n *  httpStore = new HTTPStore(rootURL, options)\n *  ```\n *  \n *  - `rootURL` is the base URL that will be prepended to the paths passed to\n *    the `get`, `set` and `delete` methods.\n *  - `options.headers` are custom headers that will be added to every HTTP\n *    request.\n *  - `httpStore` is an object that exposes the standard olojs store API: `get`,\n *    `set` and `delete`.\n */\nclass HTTPStore extends EmptyStore {\n    \n    constructor (rootURL, options={}) {\n        super();\n        this.rootURL = URI.normalize(`${rootURL}/`);\n        this.headers = isObject(options.headers) ? options.headers : {};\n    }\n    \n    resolveURL (path) {\n        return this.rootURL + pathlib.normalize(`/${path}`).slice(1);\n    }\n    \n\n    /**\n     *  HTTPStore.prototype.get - async method\n     *  ------------------------------------------------------------------------\n     *  Retrieves a remote olo-document via HTTP GET (HTTPS GET).\n     *  \n     *  ```js\n     *  const source = await httpStore.get(\"/path/to/doc\")\n     *  ```\n     *  \n     *  - On 200 status code, returns the response body as string\n     *  - On 403 status code, throws a PermissionDenied error\n     *  - On 404 status code, return an empty string\n     *  - On 405 status code, throws an OperationNotAllowed error\n     *  - On any other status code, throws a generic error\n     */\n    async get (path) {\n        const url = this.resolveURL(path);\n\n        const response = await fetch(url, {\n            method: 'get',\n            headers: Object.assign({}, this.headers, {\n                'Accept': 'text/*',\n            }),\n        });\n        \n        switch (response.status) {\n            case 200:\n                return await response.text();            \n            case 403:\n                throw new errors.PermissionDenied('GET', url);\n            case 404:\n                return \"\";\n            case 405:\n                throw new errors.OperationNotAllowed('GET', url);\n            default:\n                let message = await response.text();\n                throw new Error(message);\n        }                            \n    }\n    \n    \n    /**\n     *  HTTPStore.prototype.set - async method\n     *  ------------------------------------------------------------------------\n     *  Modifies a remote olo-document via HTTP PUT (HTTPS PUT).\n     *  \n     *  ```js\n     *  await httpStore.set(\"/path/to/doc\", source)\n     *  ```\n     *  \n     *  - On 200 and 201 status code, returns\n     *  - On 403 status code, throws a PermissionDenied error\n     *  - On 405 status code, throws an OperationNotAllowed error\n     *  - On any other status code, throws a generic error\n     */\n    async set (path, source) {\n        const url = this.resolveURL(path);\n\n        const response = await fetch(url, {\n            method: 'put',\n            headers: Object.assign({}, this.headers, {\n                'Accept': 'text/*',\n                'Content-Type': 'text/plain',\n            }),\n            body: String(source)\n        });\n        \n        switch (response.status) {\n            case 200:\n            case 201:\n                break;\n            case 403:\n                throw new errors.PermissionDenied('SET', url);\n            case 405:\n                throw new errors.OperationNotAllowed('SET', url);\n            default:\n                let message = await response.text();\n                throw new Error(message);\n        }                    \n    }    \n    \n    \n    /**\n     *  HTTPStore.prototype.delete - async method\n     *  ------------------------------------------------------------------------\n     *  Modifies a remote olo-document via HTTP DELETE (HTTPS DELETE).\n     *  \n     *  ```js\n     *  await httpStore.delete(\"/path/to/doc\")\n     *  ```\n     *  \n     *  - On 200 status code, returns\n     *  - On 403 status code, throws a PermissionDenied error\n     *  - On 405 status code, throws an OperationNotAllowed error\n     *  - On any other status code, throws a generic error\n     */\n    async delete (path) {\n        const url = this.resolveURL(path);\n\n        const response = await fetch(url, {\n            method: 'delete',\n            headers: Object.assign({}, this.headers, {\n                'Accept': 'text/*',\n                'Content-Type': 'text/plain',\n            })\n        });\n        \n        switch (response.status) {\n            case 200:\n                break;\n            case 403:\n                throw new errors.PermissionDenied('DELETE', url);\n            case 405:\n                throw new errors.OperationNotAllowed('DELETE', url);\n            default:\n                let message = await response.text();\n                throw new Error(message);\n        }        \n    }    \n}\n\n\nmodule.exports = HTTPStore;\n\n\n//# sourceURL=webpack:///./lib/stores/http.js?");

/***/ }),

/***/ "./lib/stores/memory.js":
/*!******************************!*\
  !*** ./lib/stores/memory.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const pathlib = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\nconst EmptyStore = __webpack_require__(/*! ./empty */ \"./lib/stores/empty.js\");\n\n\n\n/**\n *  MemoryStore\n *  ============================================================================\n *  This store handles read/write operations on an in-memory map object.\n *\n *  ```js\n *  memStore = new MemoryStore()\n *  ```\n */\nclass MemoryStore extends EmptyStore {\n    \n    constructor () {\n        super();\n        this._content = new Map();\n    }\n    \n    normalizePath (path) {\n        return pathlib.normalize(`/${path}`);\n    }\n    \n    /**\n     *  memStore.get - method\n     *  ----------------------------------------------------------------------------\n     *  Retrieves the in-memory document source mapped to the given path.\n     *\n     *  ```js\n     *  const source = await memStore.get(\"/path/to/doc\");\n     *  ```\n     *  \n     *  - When requesting `path/to/x/../doc`, the content of `/path/to/doc` will\n     *    be returned\n     *  - When requesting an entry that doesn't exist, and empty string will be returned\n     */\n    get (path) {\n        const normPath = this.normalizePath(path);\n        return this._content.get(normPath) || \"\";\n    }\n\n\n    /**\n     *  memStore.set - method\n     *  ----------------------------------------------------------------------------\n     *  Maps a document path to a source, in memory.\n     *\n     *  ```js\n     *  await memStore.set(\"/path/to/doc\", source);\n     *  ```\n     *  \n     *  - If path is `path/to/x/../doc`, the content of `/path/to/doc` will\n     *    be modified with the passed source\n     *  - `source` will be always converted to string\n     */\n    set (path, source) {\n        const normPath = this.normalizePath(path);\n        return this._content.set(normPath, String(source));\n    }\n    \n\n    /**\n     *  memStore.delete - method\n     *  ----------------------------------------------------------------------------\n     *  Erases the doc source mapped in memory to the given path.\n     *\n     *  ```js\n     *  await memStore.delete(\"/path/to/doc\");\n     *  ```\n     *  \n     *  - If path is `path/to/x/../doc`, the entry `/path/to/doc` will be deleted\n     */\n    delete (path) {\n        const normPath = this.normalizePath(path);\n        return this._content.delete(normPath);\n    }\n}\n\nmodule.exports = MemoryStore;\n\n\n//# sourceURL=webpack:///./lib/stores/memory.js?");

/***/ }),

/***/ "./lib/stores/router.js":
/*!******************************!*\
  !*** ./lib/stores/router.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nconst pathlib = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\nconst EmptyStore = __webpack_require__(/*! ./empty */ \"./lib/stores/empty.js\");\n\n/**\n *  RouterStore\n *  ============================================================================\n *  This store is a container for other stores and routes the `get`, `set` and\n *  delete requests to the store matching the path.\n *\n *  ```js\n *  router = new RouterStore({name1:store1, name2:store2, ...})\n *  ```\n *  \n *  - Each `name_i:store_i` parameter is a mount point. All the `get`, `set` and\n *    delete calls to paths like `/name_i/path/to/doc` will be rerouted to\n *    `store_i` after reducing the path to `/path/to/doc`.\n *  - `router` is an object that exposes the standard olojs store API: `get`,\n *    `set` and `delete`.\n */\n\nclass RouterStore extends EmptyStore {\n    \n    constructor (routes) {\n        super();\n        this._routes = new Map();\n        if (isObject(routes)) {\n            for (let name in routes) {\n                this.mount(name, routes[name]);\n            }\n        }\n    }\n    \n    mount (name, store) {\n        if (!isValidName(name)) throw new Error(`Invalid route name: ${name}`);\n        if (!isStore(store)) throw new Error(`Invalid store`);\n        this._routes.set(name, store);\n    }\n    \n    unmount (name) {\n        this._routes.delete(name);\n    }\n    \n\n    /**\n     *  router.get - async method\n     *  ----------------------------------------------------------------------------\n     *  Retrieves an olo-document from the matching sub-store.\n     *\n     *  ```js\n     *  const source = await router.get(\"/name_i/path/to/doc\");\n     *  ```\n     *  \n     *  - When requesting `/store_i/path/to/doc`, the request will be forwarded\n     *    to the store mounted on `/store_i`, with path `/path/to/doc`\n     *  - When no store is mounted on `/store_i`, it returns an empty string\n     *  - When requesting `/`, it returns a document whose namespace contains a \n     *    `children` list of the mounted store names, followed by a `/`.\n     */\n    async get (path) {\n        if (isRootPath(path)) {\n            let children = Array.from(this._routes.keys()).map(name => `/${name}/`);\n            return this.constructor.createIndexDocument(children);\n        }\n        const store = this._routes.get(routeName(path));\n        if (store) {\n            return await store.get(routeSubPath(path));\n        } else {\n            return super.get(routeSubPath(path));\n        }\n    }\n    \n\n    /**\n     *  router.set - async method\n     *  ----------------------------------------------------------------------------\n     *  Modifies an olo-document contained in the matching sub-store.\n     *\n     *  ```js\n     *  await router.set(\"/name_i/path/to/doc\", source);\n     *  ```\n     *  \n     *  - When passing `/store_i/path/to/doc`, the request will be forwarded\n     *    to the store mounted on `/store_i`, with path `/path/to/doc`\n     *  - When no store is mounted on `/store_i`, it throws an `OperationNotAllowed`\n     *    error.\n     *  - When path is the root path `/`, it throws an `OperationNotAllowed`\n     *    error.\n     */\n    async set (path, source) {\n        const store = this._routes.get(routeName(path));\n        if (store) {\n            return await store.set(routeSubPath(path), source);\n        } else {\n            return super.set(path, source);\n        }\n    }\n\n\n    /**\n     *  router.delete - async method\n     *  ----------------------------------------------------------------------------\n     *  Deletes an olo-document contained in the matching sub-store.\n     *\n     *  ```js\n     *  await router.delete(\"/name_i/path/to/doc\");\n     *  ```\n     *  \n     *  - When passing `/store_i/path/to/doc`, the request will be forwarded\n     *    to the store mounted on `/store_i`, with path `/path/to/doc`\n     *  - When no store is mounted on `/store_i`, it throws an `OperationNotAllowed`\n     *    error.\n     *  - When path is the root path `/`, it throws an `OperationNotAllowed`\n     *    error.\n     */\n    async delete (path, source) {\n        const store = this._routes.get(routeName(path));\n        if (store) {\n            return await store.delete(routeSubPath(path));\n        } else {\n            return super.delete(path);\n        }\n    }    \n}\n\n\nmodule.exports = RouterStore;\n\n\n\n// -----------------------------------------------------------------------------\n//  SERVICE FUNCTIONS\n// -----------------------------------------------------------------------------\n\nconst isStore = obj => obj instanceof EmptyStore;\nconst isValidName = name => name.indexOf('/') === -1;\nconst isObject = o => o && typeof o === 'object' && !Array.isArray(o); \nconst normPath = path => pathlib.normalize(`/${path}`).slice(1);\nconst routeName = path => normPath(path).split('/')[0];\nconst routeSubPath = path => normPath(path).slice(routeName(path).length+1);\nconst isRootPath = path => normPath(path) === '';\n\n\n//# sourceURL=webpack:///./lib/stores/router.js?");

/***/ }),

/***/ "./lib/stores/store-errors.js":
/*!************************************!*\
  !*** ./lib/stores/store-errors.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nexports.OperationNotAllowed = class extends Error {\n    \n    constructor (operation, path) {\n        super(`Operation not allowed: ${operation} ${path}`);\n    }\n}\n\n\nexports.PermissionDenied = class extends Error {\n    \n    constructor (operation, path) {\n        super(`Permission denied: ${operation} ${path}`);\n    }\n}\n\n\n//# sourceURL=webpack:///./lib/stores/store-errors.js?");

/***/ }),

/***/ "./node_modules/isomorphic-fetch/fetch-npm-browserify.js":
/*!***************************************************************!*\
  !*** ./node_modules/isomorphic-fetch/fetch-npm-browserify.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\n__webpack_require__(/*! whatwg-fetch */ \"./node_modules/isomorphic-fetch/node_modules/whatwg-fetch/fetch.js\");\nmodule.exports = self.fetch.bind(self);\n\n\n//# sourceURL=webpack:///./node_modules/isomorphic-fetch/fetch-npm-browserify.js?");

/***/ }),

/***/ "./node_modules/isomorphic-fetch/node_modules/whatwg-fetch/fetch.js":
/*!**************************************************************************!*\
  !*** ./node_modules/isomorphic-fetch/node_modules/whatwg-fetch/fetch.js ***!
  \**************************************************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : ''\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n\n\n//# sourceURL=webpack:///./node_modules/isomorphic-fetch/node_modules/whatwg-fetch/fetch.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/uri-js/dist/es5/uri.all.js":
/*!*************************************************!*\
  !*** ./node_modules/uri-js/dist/es5/uri.all.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/** @license URI.js v4.4.0 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */\n(function (global, factory) {\n\t true ? factory(exports) :\n\tundefined;\n}(this, (function (exports) { 'use strict';\n\nfunction merge() {\n    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {\n        sets[_key] = arguments[_key];\n    }\n\n    if (sets.length > 1) {\n        sets[0] = sets[0].slice(0, -1);\n        var xl = sets.length - 1;\n        for (var x = 1; x < xl; ++x) {\n            sets[x] = sets[x].slice(1, -1);\n        }\n        sets[xl] = sets[xl].slice(1);\n        return sets.join('');\n    } else {\n        return sets[0];\n    }\n}\nfunction subexp(str) {\n    return \"(?:\" + str + \")\";\n}\nfunction typeOf(o) {\n    return o === undefined ? \"undefined\" : o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase();\n}\nfunction toUpperCase(str) {\n    return str.toUpperCase();\n}\nfunction toArray(obj) {\n    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];\n}\nfunction assign(target, source) {\n    var obj = target;\n    if (source) {\n        for (var key in source) {\n            obj[key] = source[key];\n        }\n    }\n    return obj;\n}\n\nfunction buildExps(isIRI) {\n    var ALPHA$$ = \"[A-Za-z]\",\n        CR$ = \"[\\\\x0D]\",\n        DIGIT$$ = \"[0-9]\",\n        DQUOTE$$ = \"[\\\\x22]\",\n        HEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),\n        //case-insensitive\n    LF$$ = \"[\\\\x0A]\",\n        SP$$ = \"[\\\\x20]\",\n        PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),\n        //expanded\n    GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n        SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n        UCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",\n        //subset, excludes bidi control characters\n    IPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",\n        //subset\n    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n        USERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n        DEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n        DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),\n        //relaxed parsing rules\n    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n        H16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n        LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n        IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$),\n        //                           6( h16 \":\" ) ls32\n    IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$),\n        //                      \"::\" 5( h16 \":\" ) ls32\n    IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$),\n        //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$),\n        //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$),\n        //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$),\n        //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$),\n        //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$),\n        //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"),\n        //[ *6( h16 \":\" ) h16 ] \"::\"\n    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n        ZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),\n        //RFC 6874\n    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),\n        //RFC 6874\n    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),\n        //RFC 6874, with relaxed parsing rules\n    IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n        IP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),\n        //RFC 6874\n    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n        HOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n        PORT$ = subexp(DIGIT$$ + \"*\"),\n        AUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n        PCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n        SEGMENT$ = subexp(PCHAR$ + \"*\"),\n        SEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n        PATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n        PATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),\n        //simplified\n    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),\n        //simplified\n    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),\n        //simplified\n    PATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n        PATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n        FRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n        HIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        RELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n        RELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        URI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n        ABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n        GENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        RELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        ABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n        SAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        AUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\";\n    return {\n        NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n        NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n        NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n        ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        UNRESERVED: new RegExp(UNRESERVED$$, \"g\"),\n        OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n        PCT_ENCODED: new RegExp(PCT_ENCODED$, \"g\"),\n        IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n        IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\") //RFC 6874, with relaxed parsing rules\n    };\n}\nvar URI_PROTOCOL = buildExps(false);\n\nvar IRI_PROTOCOL = buildExps(true);\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/** Highest positive signed 32-bit float value */\n\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128; // 0x80\nvar delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nvar regexPunycode = /^xn--/;\nvar regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nvar regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nvar errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error$1(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tvar result = [];\n\tvar length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tvar parts = string.split('@');\n\tvar result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tvar labels = string.split('.');\n\tvar encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tvar output = [];\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t// Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nvar ucs2encode = function ucs2encode(array) {\n\treturn String.fromCodePoint.apply(String, toConsumableArray(array));\n};\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nvar basicToDigit = function basicToDigit(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nvar digitToBasic = function digitToBasic(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nvar adapt = function adapt(delta, numPoints, firstTime) {\n\tvar k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nvar decode = function decode(input) {\n\t// Don't use UCS-2.\n\tvar output = [];\n\tvar inputLength = input.length;\n\tvar i = 0;\n\tvar n = initialN;\n\tvar bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tvar basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (var j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror$1('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tvar oldi = i;\n\t\tfor (var w = 1, k = base;; /* no condition */k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror$1('invalid-input');\n\t\t\t}\n\n\t\t\tvar digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror$1('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tvar t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror$1('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\t\t}\n\n\t\tvar out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror$1('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\t}\n\n\treturn String.fromCodePoint.apply(String, output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nvar encode = function encode(input) {\n\tvar output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tvar inputLength = input.length;\n\n\t// Initialize the state.\n\tvar n = initialN;\n\tvar delta = 0;\n\tvar bias = initialBias;\n\n\t// Handle the basic code points.\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar _currentValue2 = _step.value;\n\n\t\t\tif (_currentValue2 < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(_currentValue2));\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar basicLength = output.length;\n\tvar handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tvar m = maxInt;\n\t\tvar _iteratorNormalCompletion2 = true;\n\t\tvar _didIteratorError2 = false;\n\t\tvar _iteratorError2 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\tvar currentValue = _step2.value;\n\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow.\n\t\t} catch (err) {\n\t\t\t_didIteratorError2 = true;\n\t\t\t_iteratorError2 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t_iterator2.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror$1('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tvar _iteratorNormalCompletion3 = true;\n\t\tvar _didIteratorError3 = false;\n\t\tvar _iteratorError3 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\tvar _currentValue = _step3.value;\n\n\t\t\t\tif (_currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror$1('overflow');\n\t\t\t\t}\n\t\t\t\tif (_currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\t\tvar q = delta;\n\t\t\t\t\tfor (var k = base;; /* no condition */k += base) {\n\t\t\t\t\t\tvar t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar qMinusT = q - t;\n\t\t\t\t\t\tvar baseMinusT = base - t;\n\t\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError3 = true;\n\t\t\t_iteratorError3 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t_iterator3.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nvar toUnicode = function toUnicode(input) {\n\treturn mapDomain(input, function (string) {\n\t\treturn regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nvar toASCII = function toASCII(input) {\n\treturn mapDomain(input, function (string) {\n\t\treturn regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nvar punycode = {\n\t/**\n  * A string representing the current Punycode.js version number.\n  * @memberOf punycode\n  * @type String\n  */\n\t'version': '2.1.0',\n\t/**\n  * An object of methods to convert from JavaScript's internal character\n  * representation (UCS-2) to Unicode code points, and back.\n  * @see <https://mathiasbynens.be/notes/javascript-encoding>\n  * @memberOf punycode\n  * @type Object\n  */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\n/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\nvar SCHEMES = {};\nfunction pctEncChar(chr) {\n    var c = chr.charCodeAt(0);\n    var e = void 0;\n    if (c < 16) e = \"%0\" + c.toString(16).toUpperCase();else if (c < 128) e = \"%\" + c.toString(16).toUpperCase();else if (c < 2048) e = \"%\" + (c >> 6 | 192).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();else e = \"%\" + (c >> 12 | 224).toString(16).toUpperCase() + \"%\" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();\n    return e;\n}\nfunction pctDecChars(str) {\n    var newStr = \"\";\n    var i = 0;\n    var il = str.length;\n    while (i < il) {\n        var c = parseInt(str.substr(i + 1, 2), 16);\n        if (c < 128) {\n            newStr += String.fromCharCode(c);\n            i += 3;\n        } else if (c >= 194 && c < 224) {\n            if (il - i >= 6) {\n                var c2 = parseInt(str.substr(i + 4, 2), 16);\n                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);\n            } else {\n                newStr += str.substr(i, 6);\n            }\n            i += 6;\n        } else if (c >= 224) {\n            if (il - i >= 9) {\n                var _c = parseInt(str.substr(i + 4, 2), 16);\n                var c3 = parseInt(str.substr(i + 7, 2), 16);\n                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);\n            } else {\n                newStr += str.substr(i, 9);\n            }\n            i += 9;\n        } else {\n            newStr += str.substr(i, 3);\n            i += 3;\n        }\n    }\n    return newStr;\n}\nfunction _normalizeComponentEncoding(components, protocol) {\n    function decodeUnreserved(str) {\n        var decStr = pctDecChars(str);\n        return !decStr.match(protocol.UNRESERVED) ? str : decStr;\n    }\n    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    return components;\n}\n\nfunction _stripLeadingZeros(str) {\n    return str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\nfunction _normalizeIPv4(host, protocol) {\n    var matches = host.match(protocol.IPV4ADDRESS) || [];\n\n    var _matches = slicedToArray(matches, 2),\n        address = _matches[1];\n\n    if (address) {\n        return address.split(\".\").map(_stripLeadingZeros).join(\".\");\n    } else {\n        return host;\n    }\n}\nfunction _normalizeIPv6(host, protocol) {\n    var matches = host.match(protocol.IPV6ADDRESS) || [];\n\n    var _matches2 = slicedToArray(matches, 3),\n        address = _matches2[1],\n        zone = _matches2[2];\n\n    if (address) {\n        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),\n            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),\n            last = _address$toLowerCase$2[0],\n            first = _address$toLowerCase$2[1];\n\n        var firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n        var lastFields = last.split(\":\").map(_stripLeadingZeros);\n        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n        var fieldCount = isLastFieldIPv4Address ? 7 : 8;\n        var lastFieldsStart = lastFields.length - fieldCount;\n        var fields = Array(fieldCount);\n        for (var x = 0; x < fieldCount; ++x) {\n            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n        }\n        if (isLastFieldIPv4Address) {\n            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n        }\n        var allZeroFields = fields.reduce(function (acc, field, index) {\n            if (!field || field === \"0\") {\n                var lastLongest = acc[acc.length - 1];\n                if (lastLongest && lastLongest.index + lastLongest.length === index) {\n                    lastLongest.length++;\n                } else {\n                    acc.push({ index: index, length: 1 });\n                }\n            }\n            return acc;\n        }, []);\n        var longestZeroFields = allZeroFields.sort(function (a, b) {\n            return b.length - a.length;\n        })[0];\n        var newHost = void 0;\n        if (longestZeroFields && longestZeroFields.length > 1) {\n            var newFirst = fields.slice(0, longestZeroFields.index);\n            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n            newHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n        } else {\n            newHost = fields.join(\":\");\n        }\n        if (zone) {\n            newHost += \"%\" + zone;\n        }\n        return newHost;\n    } else {\n        return host;\n    }\n}\nvar URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nvar NO_MATCH_IS_UNDEFINED = \"\".match(/(){0}/)[1] === undefined;\nfunction parse(uriString) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var components = {};\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    if (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n    var matches = uriString.match(URI_PARSE);\n    if (matches) {\n        if (NO_MATCH_IS_UNDEFINED) {\n            //store each component\n            components.scheme = matches[1];\n            components.userinfo = matches[3];\n            components.host = matches[4];\n            components.port = parseInt(matches[5], 10);\n            components.path = matches[6] || \"\";\n            components.query = matches[7];\n            components.fragment = matches[8];\n            //fix port number\n            if (isNaN(components.port)) {\n                components.port = matches[5];\n            }\n        } else {\n            //IE FIX for improper RegExp matching\n            //store each component\n            components.scheme = matches[1] || undefined;\n            components.userinfo = uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined;\n            components.host = uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined;\n            components.port = parseInt(matches[5], 10);\n            components.path = matches[6] || \"\";\n            components.query = uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined;\n            components.fragment = uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined;\n            //fix port number\n            if (isNaN(components.port)) {\n                components.port = uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined;\n            }\n        }\n        if (components.host) {\n            //normalize IP hosts\n            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n        }\n        //determine reference type\n        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n            components.reference = \"same-document\";\n        } else if (components.scheme === undefined) {\n            components.reference = \"relative\";\n        } else if (components.fragment === undefined) {\n            components.reference = \"absolute\";\n        } else {\n            components.reference = \"uri\";\n        }\n        //check for reference errors\n        if (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n            components.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n        }\n        //find scheme handler\n        var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n        //check if scheme can't handle IRIs\n        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n            //if host component is a domain name\n            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {\n                //convert Unicode IDN -> ASCII IDN\n                try {\n                    components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n                } catch (e) {\n                    components.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n                }\n            }\n            //convert IRI -> URI\n            _normalizeComponentEncoding(components, URI_PROTOCOL);\n        } else {\n            //normalize encodings\n            _normalizeComponentEncoding(components, protocol);\n        }\n        //perform scheme specific parsing\n        if (schemeHandler && schemeHandler.parse) {\n            schemeHandler.parse(components, options);\n        }\n    } else {\n        components.error = components.error || \"URI can not be parsed.\";\n    }\n    return components;\n}\n\nfunction _recomposeAuthority(components, options) {\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = [];\n    if (components.userinfo !== undefined) {\n        uriTokens.push(components.userinfo);\n        uriTokens.push(\"@\");\n    }\n    if (components.host !== undefined) {\n        //normalize IP hosts, add brackets and escape zone separator for IPv6\n        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {\n            return \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\";\n        }));\n    }\n    if (typeof components.port === \"number\" || typeof components.port === \"string\") {\n        uriTokens.push(\":\");\n        uriTokens.push(String(components.port));\n    }\n    return uriTokens.length ? uriTokens.join(\"\") : undefined;\n}\n\nvar RDS1 = /^\\.\\.?\\//;\nvar RDS2 = /^\\/\\.(\\/|$)/;\nvar RDS3 = /^\\/\\.\\.(\\/|$)/;\nvar RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\nfunction removeDotSegments(input) {\n    var output = [];\n    while (input.length) {\n        if (input.match(RDS1)) {\n            input = input.replace(RDS1, \"\");\n        } else if (input.match(RDS2)) {\n            input = input.replace(RDS2, \"/\");\n        } else if (input.match(RDS3)) {\n            input = input.replace(RDS3, \"/\");\n            output.pop();\n        } else if (input === \".\" || input === \"..\") {\n            input = \"\";\n        } else {\n            var im = input.match(RDS5);\n            if (im) {\n                var s = im[0];\n                input = input.slice(s.length);\n                output.push(s);\n            } else {\n                throw new Error(\"Unexpected dot segment condition\");\n            }\n        }\n    }\n    return output.join(\"\");\n}\n\nfunction serialize(components) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = [];\n    //find scheme handler\n    var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n    //perform scheme specific serialization\n    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n    if (components.host) {\n        //if host component is an IPv6 address\n        if (protocol.IPV6ADDRESS.test(components.host)) {}\n        //TODO: normalize IPv6 address as per RFC 5952\n\n        //if host component is a domain name\n        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {\n                //convert IDN via punycode\n                try {\n                    components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);\n                } catch (e) {\n                    components.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n                }\n            }\n    }\n    //normalize encoding\n    _normalizeComponentEncoding(components, protocol);\n    if (options.reference !== \"suffix\" && components.scheme) {\n        uriTokens.push(components.scheme);\n        uriTokens.push(\":\");\n    }\n    var authority = _recomposeAuthority(components, options);\n    if (authority !== undefined) {\n        if (options.reference !== \"suffix\") {\n            uriTokens.push(\"//\");\n        }\n        uriTokens.push(authority);\n        if (components.path && components.path.charAt(0) !== \"/\") {\n            uriTokens.push(\"/\");\n        }\n    }\n    if (components.path !== undefined) {\n        var s = components.path;\n        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n            s = removeDotSegments(s);\n        }\n        if (authority === undefined) {\n            s = s.replace(/^\\/\\//, \"/%2F\"); //don't allow the path to start with \"//\"\n        }\n        uriTokens.push(s);\n    }\n    if (components.query !== undefined) {\n        uriTokens.push(\"?\");\n        uriTokens.push(components.query);\n    }\n    if (components.fragment !== undefined) {\n        uriTokens.push(\"#\");\n        uriTokens.push(components.fragment);\n    }\n    return uriTokens.join(\"\"); //merge tokens into a string\n}\n\nfunction resolveComponents(base, relative) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var skipNormalization = arguments[3];\n\n    var target = {};\n    if (!skipNormalization) {\n        base = parse(serialize(base, options), options); //normalize base components\n        relative = parse(serialize(relative, options), options); //normalize relative components\n    }\n    options = options || {};\n    if (!options.tolerant && relative.scheme) {\n        target.scheme = relative.scheme;\n        //target.authority = relative.authority;\n        target.userinfo = relative.userinfo;\n        target.host = relative.host;\n        target.port = relative.port;\n        target.path = removeDotSegments(relative.path || \"\");\n        target.query = relative.query;\n    } else {\n        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n            //target.authority = relative.authority;\n            target.userinfo = relative.userinfo;\n            target.host = relative.host;\n            target.port = relative.port;\n            target.path = removeDotSegments(relative.path || \"\");\n            target.query = relative.query;\n        } else {\n            if (!relative.path) {\n                target.path = base.path;\n                if (relative.query !== undefined) {\n                    target.query = relative.query;\n                } else {\n                    target.query = base.query;\n                }\n            } else {\n                if (relative.path.charAt(0) === \"/\") {\n                    target.path = removeDotSegments(relative.path);\n                } else {\n                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n                        target.path = \"/\" + relative.path;\n                    } else if (!base.path) {\n                        target.path = relative.path;\n                    } else {\n                        target.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n                    }\n                    target.path = removeDotSegments(target.path);\n                }\n                target.query = relative.query;\n            }\n            //target.authority = base.authority;\n            target.userinfo = base.userinfo;\n            target.host = base.host;\n            target.port = base.port;\n        }\n        target.scheme = base.scheme;\n    }\n    target.fragment = relative.fragment;\n    return target;\n}\n\nfunction resolve(baseURI, relativeURI, options) {\n    var schemelessOptions = assign({ scheme: 'null' }, options);\n    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n}\n\nfunction normalize(uri, options) {\n    if (typeof uri === \"string\") {\n        uri = serialize(parse(uri, options), options);\n    } else if (typeOf(uri) === \"object\") {\n        uri = parse(serialize(uri, options), options);\n    }\n    return uri;\n}\n\nfunction equal(uriA, uriB, options) {\n    if (typeof uriA === \"string\") {\n        uriA = serialize(parse(uriA, options), options);\n    } else if (typeOf(uriA) === \"object\") {\n        uriA = serialize(uriA, options);\n    }\n    if (typeof uriB === \"string\") {\n        uriB = serialize(parse(uriB, options), options);\n    } else if (typeOf(uriB) === \"object\") {\n        uriB = serialize(uriB, options);\n    }\n    return uriA === uriB;\n}\n\nfunction escapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);\n}\n\nfunction unescapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);\n}\n\nvar handler = {\n    scheme: \"http\",\n    domainHost: true,\n    parse: function parse(components, options) {\n        //report missing host\n        if (!components.host) {\n            components.error = components.error || \"HTTP URIs must have a host.\";\n        }\n        return components;\n    },\n    serialize: function serialize(components, options) {\n        var secure = String(components.scheme).toLowerCase() === \"https\";\n        //normalize the default port\n        if (components.port === (secure ? 443 : 80) || components.port === \"\") {\n            components.port = undefined;\n        }\n        //normalize the empty path\n        if (!components.path) {\n            components.path = \"/\";\n        }\n        //NOTE: We do not parse query strings for HTTP URIs\n        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n        //and not the HTTP spec.\n        return components;\n    }\n};\n\nvar handler$1 = {\n    scheme: \"https\",\n    domainHost: handler.domainHost,\n    parse: handler.parse,\n    serialize: handler.serialize\n};\n\nfunction isSecure(wsComponents) {\n    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n}\n//RFC 6455\nvar handler$2 = {\n    scheme: \"ws\",\n    domainHost: true,\n    parse: function parse(components, options) {\n        var wsComponents = components;\n        //indicate if the secure flag is set\n        wsComponents.secure = isSecure(wsComponents);\n        //construct resouce name\n        wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n        wsComponents.path = undefined;\n        wsComponents.query = undefined;\n        return wsComponents;\n    },\n    serialize: function serialize(wsComponents, options) {\n        //normalize the default port\n        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n            wsComponents.port = undefined;\n        }\n        //ensure scheme matches secure flag\n        if (typeof wsComponents.secure === 'boolean') {\n            wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';\n            wsComponents.secure = undefined;\n        }\n        //reconstruct path from resource name\n        if (wsComponents.resourceName) {\n            var _wsComponents$resourc = wsComponents.resourceName.split('?'),\n                _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),\n                path = _wsComponents$resourc2[0],\n                query = _wsComponents$resourc2[1];\n\n            wsComponents.path = path && path !== '/' ? path : undefined;\n            wsComponents.query = query;\n            wsComponents.resourceName = undefined;\n        }\n        //forbid fragment component\n        wsComponents.fragment = undefined;\n        return wsComponents;\n    }\n};\n\nvar handler$3 = {\n    scheme: \"wss\",\n    domainHost: handler$2.domainHost,\n    parse: handler$2.parse,\n    serialize: handler$2.serialize\n};\n\nvar O = {};\nvar isIRI = true;\n//RFC 3986\nvar UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nvar HEXDIG$$ = \"[0-9A-Fa-f]\"; //case-insensitive\nvar PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)); //expanded\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nvar ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nvar QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nvar VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nvar SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nvar UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nvar PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nvar NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nvar NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nvar NOT_HFVALUE = NOT_HFNAME;\nfunction decodeUnreserved(str) {\n    var decStr = pctDecChars(str);\n    return !decStr.match(UNRESERVED) ? str : decStr;\n}\nvar handler$4 = {\n    scheme: \"mailto\",\n    parse: function parse$$1(components, options) {\n        var mailtoComponents = components;\n        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(\",\") : [];\n        mailtoComponents.path = undefined;\n        if (mailtoComponents.query) {\n            var unknownHeaders = false;\n            var headers = {};\n            var hfields = mailtoComponents.query.split(\"&\");\n            for (var x = 0, xl = hfields.length; x < xl; ++x) {\n                var hfield = hfields[x].split(\"=\");\n                switch (hfield[0]) {\n                    case \"to\":\n                        var toAddrs = hfield[1].split(\",\");\n                        for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {\n                            to.push(toAddrs[_x]);\n                        }\n                        break;\n                    case \"subject\":\n                        mailtoComponents.subject = unescapeComponent(hfield[1], options);\n                        break;\n                    case \"body\":\n                        mailtoComponents.body = unescapeComponent(hfield[1], options);\n                        break;\n                    default:\n                        unknownHeaders = true;\n                        headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n                        break;\n                }\n            }\n            if (unknownHeaders) mailtoComponents.headers = headers;\n        }\n        mailtoComponents.query = undefined;\n        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {\n            var addr = to[_x2].split(\"@\");\n            addr[0] = unescapeComponent(addr[0]);\n            if (!options.unicodeSupport) {\n                //convert Unicode IDN -> ASCII IDN\n                try {\n                    addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n                } catch (e) {\n                    mailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n                }\n            } else {\n                addr[1] = unescapeComponent(addr[1], options).toLowerCase();\n            }\n            to[_x2] = addr.join(\"@\");\n        }\n        return mailtoComponents;\n    },\n    serialize: function serialize$$1(mailtoComponents, options) {\n        var components = mailtoComponents;\n        var to = toArray(mailtoComponents.to);\n        if (to) {\n            for (var x = 0, xl = to.length; x < xl; ++x) {\n                var toAddr = String(to[x]);\n                var atIdx = toAddr.lastIndexOf(\"@\");\n                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n                var domain = toAddr.slice(atIdx + 1);\n                //convert IDN via punycode\n                try {\n                    domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);\n                } catch (e) {\n                    components.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n                }\n                to[x] = localPart + \"@\" + domain;\n            }\n            components.path = to.join(\",\");\n        }\n        var headers = mailtoComponents.headers = mailtoComponents.headers || {};\n        if (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n        if (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n        var fields = [];\n        for (var name in headers) {\n            if (headers[name] !== O[name]) {\n                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + \"=\" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));\n            }\n        }\n        if (fields.length) {\n            components.query = fields.join(\"&\");\n        }\n        return components;\n    }\n};\n\nvar URN_PARSE = /^([^\\:]+)\\:(.*)/;\n//RFC 2141\nvar handler$5 = {\n    scheme: \"urn\",\n    parse: function parse$$1(components, options) {\n        var matches = components.path && components.path.match(URN_PARSE);\n        var urnComponents = components;\n        if (matches) {\n            var scheme = options.scheme || urnComponents.scheme || \"urn\";\n            var nid = matches[1].toLowerCase();\n            var nss = matches[2];\n            var urnScheme = scheme + \":\" + (options.nid || nid);\n            var schemeHandler = SCHEMES[urnScheme];\n            urnComponents.nid = nid;\n            urnComponents.nss = nss;\n            urnComponents.path = undefined;\n            if (schemeHandler) {\n                urnComponents = schemeHandler.parse(urnComponents, options);\n            }\n        } else {\n            urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n        }\n        return urnComponents;\n    },\n    serialize: function serialize$$1(urnComponents, options) {\n        var scheme = options.scheme || urnComponents.scheme || \"urn\";\n        var nid = urnComponents.nid;\n        var urnScheme = scheme + \":\" + (options.nid || nid);\n        var schemeHandler = SCHEMES[urnScheme];\n        if (schemeHandler) {\n            urnComponents = schemeHandler.serialize(urnComponents, options);\n        }\n        var uriComponents = urnComponents;\n        var nss = urnComponents.nss;\n        uriComponents.path = (nid || options.nid) + \":\" + nss;\n        return uriComponents;\n    }\n};\n\nvar UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\n//RFC 4122\nvar handler$6 = {\n    scheme: \"urn:uuid\",\n    parse: function parse(urnComponents, options) {\n        var uuidComponents = urnComponents;\n        uuidComponents.uuid = uuidComponents.nss;\n        uuidComponents.nss = undefined;\n        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n            uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n        }\n        return uuidComponents;\n    },\n    serialize: function serialize(uuidComponents, options) {\n        var urnComponents = uuidComponents;\n        //normalize UUID\n        urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n        return urnComponents;\n    }\n};\n\nSCHEMES[handler.scheme] = handler;\nSCHEMES[handler$1.scheme] = handler$1;\nSCHEMES[handler$2.scheme] = handler$2;\nSCHEMES[handler$3.scheme] = handler$3;\nSCHEMES[handler$4.scheme] = handler$4;\nSCHEMES[handler$5.scheme] = handler$5;\nSCHEMES[handler$6.scheme] = handler$6;\n\nexports.SCHEMES = SCHEMES;\nexports.pctEncChar = pctEncChar;\nexports.pctDecChars = pctDecChars;\nexports.parse = parse;\nexports.removeDotSegments = removeDotSegments;\nexports.serialize = serialize;\nexports.resolveComponents = resolveComponents;\nexports.resolve = resolve;\nexports.normalize = normalize;\nexports.equal = equal;\nexports.escapeComponent = escapeComponent;\nexports.unescapeComponent = unescapeComponent;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=uri.all.js.map\n\n\n//# sourceURL=webpack:///./node_modules/uri-js/dist/es5/uri.all.js?");

/***/ })

/******/ });